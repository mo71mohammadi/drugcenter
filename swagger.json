{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server EHRS server.",
    "version": "1.0.0",
    "title": "EHRS",
    "contact": {
      "email": "Admin@ehrs.ir"
    }
  },
  "tags": [
    {
      "name": "User",
      "description": "Operations about Users"
    },
    {
      "name": "Product",
      "description": "Operations about Product"
    },
    {
      "name": "Generic",
      "description": "Operations about Generic"
    },
    {
      "name": "Category",
      "description": "Operations about Category"
    },
    {
      "name": "Price",
      "description": "Operations about Price"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/api/products/getAll": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Return all product by filters",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product filters",
            "schema": {
              "type": "object",
              "required": [
                "size",
                "page"
              ],
              "properties": {
                "size": {
                  "type": "integer",
                  "example": 10
                },
                "page": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/products/getOne": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Get product by _id",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product _id",
            "schema": {
              "type": "object",
              "required": [
                "_id"
              ],
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5f180141e7d39f2f5f53bd1d"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/products/create": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create product item",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to insert",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/image": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Add product image (max 10)",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "productImg",
            "in": "formData",
            "description": "Updated images of the product",
            "type": "array",
            "items": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "Product _id not found!"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Create product item",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Image item that needs to delete",
            "schema": {
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "10000000000"
                },
                "item": {
                  "type": "string",
                  "example": "cccccc.jpg"
                }
              }

            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "Product _id not found!"
          }
        }
      }
    },
    "/api/products/update": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "update product item by _id",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to update",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/price": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "add Price product",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "_id of the product that needs to be add price",
            "schema": {
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5f180141e7d39f2f5f53bd1d"
                },
                "sPrice": {
                  "type": "integer",
                  "example": 200
                },
                "dPrice": {
                  "type": "integer",
                  "example": 300
                },
                "cPrice": {
                  "type": "integer",
                  "example": 400
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "delete Price product",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "_id of the product & _id of the price doc that needs to be delete price",
            "schema": {
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5f180141e7d39f2f5f53bd1d"
                },
                "priceId": {
                  "type": "string",
                  "example": "5f180141e7d39f2f5f53bsa"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/import": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "import product items from xlsx file",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "products",
            "in": "formData",
            "description": "Updated file of the product",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/importUpdate": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "import product items from xlsx file",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "update",
            "in": "formData",
            "description": "Updated file of the category",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/export": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "export product items xlsx file",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product filters that needs to export",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/delete": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "delete product item by _id",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "_id of the product that needs to be deleted",
            "schema": {
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5f180141e7d39f2f5f53bd1d"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/search": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "search product by query",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "search word",
            "required": true,
            "type": "string",
            "enum": [
              "ace"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },

    "/api/generics/import": {
      "post": {
        "tags": [
          "Generic"
        ],
        "summary": "import generic items from xlsx file",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "generic",
            "in": "formData",
            "description": "Updated file of the generic",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },


    "/api/drugs/getAll": {
      "post": {
        "tags": [
          "Drug"
        ],
        "summary": "Return all drugs by filters",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Drug filters",
            "schema": {
              "type": "object",
              "required": [
                "size",
                "page"
              ],
              "properties": {
                "size": {
                  "type": "integer",
                  "example": 10
                },
                "page": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/drugs/getOne": {
      "post": {
        "tags": [
          "Drug"
        ],
        "summary": "Get drug by _id",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "drug _id",
            "schema": {
              "type": "object",
              "required": [
                "_id"
              ],
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5f180141e7d39f2f5f53bd1d"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/drugs/create": {
      "post": {
        "tags": [
          "Drug"
        ],
        "summary": "Create drug item",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "drug object that needs to insert",
            "schema": {
              "$ref": "#/definitions/Drug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/drugs/update": {
      "put": {
        "tags": [
          "Drug"
        ],
        "summary": "update Drug item by _id",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "drug object that needs to update",
            "schema": {
              "$ref": "#/definitions/Drug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/drugs/import": {
      "post": {
        "tags": [
          "Drug"
        ],
        "summary": "import Drug items from xlsx file",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "drugs",
            "in": "formData",
            "description": "Updated file of the product",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/drugs/export": {
      "post": {
        "tags": [
          "Drug"
        ],
        "summary": "export drug items xlsx file",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Drug filters that needs to export",
            "schema": {
              "$ref": "#/definitions/Drug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/drugs/delete": {
      "delete": {
        "tags": [
          "Drug"
        ],
        "summary": "delete drug item by _id",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "_id of the drug that needs to be deleted",
            "schema": {
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5f180141e7d39f2f5f53bd1d"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/drugs/search": {
      "get": {
        "tags": [
          "Drug"
        ],
        "summary": "search drug by query",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "search word",
            "required": true,
            "type": "string",
            "enum": [
              "ace"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "drug validation failed"
          }
        }
      }
    },

    "/api/price/getAll": {
      "post": {
        "tags": [
          "Price"
        ],
        "summary": "get all prices",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product filters",
            "schema": {
              "type": "object",
              "required": [
                "size",
                "page"
              ],
              "properties": {
                "size": {
                  "type": "integer",
                  "example": 10
                },
                "page": {
                  "type": "integer",
                  "example": 1
                },
                "site": {
                  "type": "string",
                  "example": "ttac"
                },
                "type": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }

        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "500": {
            "description": "error"
          }
        }
      }
    },
    "/api/price/create": {
      "post": {
        "tags": [
          "Price"
        ],
        "summary": "Create Price item",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Price object that needs to insert",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/price/update": {
      "put": {
        "tags": [
          "Price"
        ],
        "summary": "Update Price item",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Price object that needs to Update",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/price/delete": {
      "delete": {
        "tags": [
          "Price"
        ],
        "summary": "Delete Price item",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "_id of the product that needs to be deleted",
            "schema": {
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5f180141e7d39f2f5f53bd1d"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },

    "/api/price/download": {
      "post": {
        "tags": [
          "Price"
        ],
        "summary": "download price file from ttac",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product filters",
            "schema": {
              "type": "object",
              "required": [
                "site"
              ],
              "properties": {
                "site": {
                  "type": "string",
                  "example": "ttac"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "500": {
            "description": "error"
          }
        }
      }
    },
    "/api/price/updateFrom": {
      "put": {
        "tags": [
          "Price"
        ],
        "summary": "update product price from ttac file",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "500": {
            "description": "error"
          }
        }
      }
    },

    "/api/products/category/getAll": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "get all categories",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "500": {
            "description": "error"
          }
        }
      }
    },
    "/api/products/category/getOne": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "get category by level",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "name of current level & id of previous level.",
            "schema": {
              "properties": {
                "level": {
                  "type": "string",
                  "example": "L2"
                },
                "prevId": {
                  "type": "string",
                  "example": "A"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/category/create": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Create new category",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "level and name of current level & id of previous level. if level is 'L1' the 'prevId' is null.",
            "schema": {
              "properties": {
                "level": {
                  "type": "string",
                  "example": "L2"
                },
                "name": {
                  "type": "string",
                  "example": "ارتوپدی"
                },
                "prevId": {
                  "type": "string",
                  "example": "A"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          },
          "500": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/category/import": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "import product items from xlsx file",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "formData",
            "description": "Updated file of the category",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/category/delete": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "delete category product",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "id of the category that needs to be delete price",
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "example": "C"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/products/category/update": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "delete Price product",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "id of the category & new name that needs to be update category",
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "example": "B"
                },
                "name": {
                  "type": "string",
                  "example": "رادیولوژی"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },

    "/api/drugs/getName": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "get unique enName and enRoute of drugs",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "size",
                "page"
              ],
              "properties": {
                "size": {
                  "type": "integer",
                  "example": 10
                },
                "page": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/Interaction/update": {
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "update Interactions of drugs",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "enName",
                "enRoute"
              ],
              "properties": {
                "enName": {
                  "type": "string",
                  "example": "IBUPROFEN"
                },
                "enRoute": {
                  "type": "string",
                  "example": "INTRAVENOUS"
                },
                "upToDateId": {
                  "type": "string",
                  "example": "6351"
                },
                "medScapeId": {
                  "type": "string",
                  "example": "343289"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/Interaction/medScape/getName": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "get unique name and id of medScape collection",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    },
    "/api/Interaction/upToDate/getName": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "get unique name and id of upToDate collection",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "A successful response"
          },
          "401": {
            "description": "product validation failed"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Product": {
      "type": "object",
      "required": [
        "eRx",
        "packageCode"
      ],
      "properties": {
        "eRx": {
          "type": "string",
          "example": "eRx123466"
        },
        "packageCode": {
          "type": "string",
          "example": "A"
        },
        "eRxGeneric": {
          "type": "string",
          "example": "eRx464545"
        },
        "sepasCode": {
          "type": "string",
          "example": "2000000"
        },
        "genericCode": {
          "type": "integer",
          "example": 45
        },
        "packageCount": {
          "type": "integer",
          "example": 100
        },
        "enGenericName": {
          "type": "string",
          "example": "Sertraline"
        },
        "faGenericName": {
          "type": "string",
          "example": "سرترالین"
        },
        "enBrandName": {
          "type": "string",
          "example": "Zoloft"
        },
        "faBrandName": {
          "type": "string",
          "example": "زولوفت"
        },
        "licenceOwner": {
          "type": "string",
          "example": "داروپخش"
        },
        "brandOwner": {
          "type": "string",
          "example": "داروپخش"
        },
        "producer": {
          "type": "string",
          "example": "داروپخش"
        },
        "countryBrandOwner": {
          "type": "string",
          "example": "ایران"
        },
        "countryProducer": {
          "type": "string",
          "example": "ایران"
        },
        "gtn": {
          "type": "array",
          "example": [
            "123456998855"
          ]
        },
        "irc": {
          "type": "array",
          "example": [
            "123456998855"
          ]
        },
        "category": {
          "type": "array",
          "example": [
            "A01B02"
          ]
        },
        "nativeIrc": {
          "type": "string",
          "example": "123456998855005"
        },
        "cName": {
          "type": "array",
          "example": [
            "ضدافسردگی"
          ]
        },
        "videos": {
          "type": "array",
          "example": [
            " https://www.aparat.com/v/WOS6C "
          ]
        },
        "properties": {
          "type": "array",
          "example": [
            {
              "key": "size",
              "value": "2.8nm"
            }
          ]
        }
      }
    },
    "Drug": {
      "type": "object",
      "required": [
        "enName",
        "enRoute"
      ],
      "properties": {
        "enName": {
          "type": "string",
          "example": "eRx464545"
        },
        "enRoute": {
          "type": "string",
          "example": "Zoloft"
        },
        "faName": {
          "type": "string",
          "example": "2000000"
        },
        "strength": {
          "type": "string",
          "example": "45"
        },
        "volume": {
          "type": "string",
          "example": "100"
        },
        "enForm": {
          "type": "string",
          "example": "Sertraline"
        },
        "faForm": {
          "type": "string",
          "example": "سرترالین"
        },
        "faRoute": {
          "type": "string",
          "example": "زولوفت"
        },
        "edl": {
          "type": "boolean",
          "example": false
        },
        "medScapeId": {
          "type": "object",
          "example": {
            "interaction": ["200"],
            "info": ["230"]
          }
        },
        "upToDateId": {
          "type": "object",
          "example": {
            "interaction": [],
            "info": []
          }
        },
        "atc": {
          "type": "array",
          "example": [
            {
              "code": "ABCD01",
              "ddd": "2 mg"
            }
          ]
        },
        "genericNames": {
          "type": "array",
          "example": [
            {
              "enName": "Acetaminophen",
              "faName": "استامینوفن"
            }
          ]
        }
      }
    },
    "Price": {
      "type": "object",
      "required": [
        "irc",
        "site"
      ],
      "properties": {
        "product": {
          "type": "string",
          "description": "product _id referenced",
          "example": "5f3658003fe1531a7fab48d3"
        },
        "irc": {
          "type": "string",
          "example": "0003218424697049"
        },
        "site": {
          "type": "string",
          "example": "ttac"
        },

        "gtn": {
          "type": "string",
          "example": "04037353007154"
        },
        "brandOwner": {
          "type": "string",
          "example": "OXALIMEDAC"
        },
        "enBrandName": {
          "type": "string",
          "example": "OXALIMEDAC® 100MG/20ML  VIAL   INJECTION, POWDER, LYOPHILIZED, FOR SOLUTION PARENTERAL 100 mg"
        },
        "faBrandName": {
          "type": "string",
          "example": "اگزالی مداک® 100م گ ویال   پودر لئوفیلیزه برای تهیه محلول تزریقی پرنترال 100"
        },
        "packageCount": {
          "type": "string",
          "example": "100"
        },
        "enLicenceOwner": {
          "type": "string",
          "example": "Aram Pharmaceutical Co. Ltd"
        },
        "faLicenceOwner": {
          "type": "string",
          "example": "داروئی آرام"
        },
        "faProducer": {
          "type": "string",
          "example": "Zoloft"
        },
        "enProducer": {
          "type": "string",
          "example": "زولوفت"
        },
        "isBulk": {
          "type": "string",
          "example": "false"
        },
        "enName": {
          "type": "string",
          "example": "OXALIPLATIN   INJECTION, POWDER, LYOPHILIZED, FOR SOLUTION PARENTERAL 100 mg"
        },
        "genericName": {
          "type": "string",
          "example": "OXALIPLATIN INJECTION, POWDER, LYOPHILIZED, FOR SOLUTION PARENTERAL 100 mg"
        },
        "genericCode": {
          "type": "string",
          "example": "1916"
        },
        "atc": {
          "type": "string",
          "example": "L01XA03"
        },
        "officialCode": {
          "type": "string",
          "example": "7040"
        },
        "statusType": {
          "type": "string",
          "example": "لغو شده"
        },
        "category": {
          "type": "string",
          "example": "دارو"
        },
        "type": {
          "type": "number",
          "example": 0
        },
        "price": {
          "type": "array",
          "example": [
            {
              "sPrice": 0,
              "cPrice": 0,
              "dPrice": 0
            }
          ]
        }
      }
    }
  }
}
